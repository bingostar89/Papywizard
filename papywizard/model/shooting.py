# -*- coding: utf-8 -*-

""" Panohead remote control.

License
=======

 - B{papywizard} (U{http://trac.gbiloba.org/papywizard}) is Copyright:
  - (C) 2007-2008 Frédéric Mantegazza

This software is governed by the B{CeCILL} license under French law and
abiding by the rules of distribution of free software.  You can  use,
modify and/or redistribute the software under the terms of the CeCILL
license as circulated by CEA, CNRS and INRIA at the following URL
U{http://www.cecill.info}.

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability.

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or
data to be ensured and,  more generally, to use and operate it in the
same conditions as regards security.

The fact that you are presently reading this means that you have had
knowledge of the CeCILL license and that you accept its terms.

Module purpose
==============

Model

Implements
==========

- Shooting

@author: Frédéric Mantegazza
@copyright: (C) 2007-2008 Frédéric Mantegazza
@license: CeCILL
"""

__revision__ = "$Id$"

import time
import threading

from papywizard.common import config
from papywizard.common.loggingServices import Logger
from papywizard.common.signal import Signal
from papywizard.common.configManager import ConfigManager
from papywizard.common.exception import HardwareError
from papywizard.model.camera import Camera
from papywizard.model.data import MosaicData, PresetData
from papywizard.model.scan import MosaicScan, PresetScan


class Shooting(object):
    """ Shooting model.
    """
    def __init__(self, realHardware, simulatedHardware):
        """ Init the object.

        @param realHardware: real hardware head
        @type realHardware: {Head}

        @param simulatedHardware: simulated hardware head
        @type simulatedHardware: {HeadSimulation}
        """
        self.__shooting = False
        self.__pause = False
        self.__stop = False
        self.__manualShoot = False
        self.__forceNewShootingIndex = False
        self.__scan = None

        self.realHardware = realHardware
        self.simulatedHardware = simulatedHardware
        self.hardware = self.simulatedHardware
        self.switchToRealHardwareSignal = Signal()
        self.newPositionSignal = Signal()
        self.startedSignal = Signal()
        self.resumedSignal = Signal()
        self.pausedSignal = Signal()
        self.stoppedSignal = Signal()
        self.updateInfoSignal = Signal()
        self.camera = Camera()
        self.mosaic = MosaicScan(self)
        self.preset = PresetScan(self)

        self.title = "Here goes the title"
        self.gps ="Here goes the location"
        self.comment = "Generated by Papywizard %s" % config.VERSION

    # Properties
    def __getMode(self):
        return ConfigManager().get('Main', 'SHOOTING_MODE')

    def __setMode(self, mode):
        ConfigManager().set('Main', 'SHOOTING_MODE', mode)

    mode = property(__getMode, __setMode)

    def __getStabilizationDelay(self):
        return ConfigManager().getFloat('Preferences', 'SHOOTING_STABILIZATION_DELAY')

    def __setStabilizationDelay(self, stabilizationDelay):
        ConfigManager().setFloat('Preferences', 'SHOOTING_STABILIZATION_DELAY', stabilizationDelay, 1)

    stabilizationDelay = property(__getStabilizationDelay, __setStabilizationDelay)

    def __getHeadOrientation(self):
        """
        """
        return ConfigManager().get('Preferences', 'SHOOTING_HEAD_ORIENTATION')

    def __setHeadOrientation(self, headOrientation):
        """
        """
        ConfigManager().set('Preferences', 'SHOOTING_HEAD_ORIENTATION', headOrientation)

    headOrientation = property(__getHeadOrientation, __setHeadOrientation)

    def __getCameraOrientation(self):
        """
        """
        return ConfigManager().get('Preferences', 'SHOOTING_CAMERA_ORIENTATION')

    def __setCameraOrientation(self, cameraOrientation):
        """
        """
        ConfigManager().set('Preferences', 'SHOOTING_CAMERA_ORIENTATION', cameraOrientation)

    cameraOrientation = property(__getCameraOrientation, __setCameraOrientation)

    def __getCameraRoll(self):
        """
        """
        return ConfigManager().getFloat('Preferences', 'SHOOTING_CAMERA_ROLL')

    def __setCameraRoll(self, cameraRoll):
        """
        """
        ConfigManager().setFloat('Preferences', 'SHOOTING_CAMERA_ROLL', cameraRoll, 1)

    cameraRoll = property(__getCameraRoll, __setCameraRoll)

    def setStartEndFromFov(self, yawFov, pitchFov):
        """ Set yaw start/end positions from total fov.

        @param yawFov: total yaw fov (°)
        @type yawFov: float

        @param pitchFov: total pitch fov (°)
        @type pitchFov: float
        """
        yawPos, pitchPos = 0., 0.
        yawDelta = yawFov - self.camera.getYawFov(self.cameraOrientation)
        if yawDelta < 0.:
            yawDelta = 0.
        self.mosaic.yawStart = yawPos - yawDelta / 2.
        self.mosaic.yawEnd = yawPos + yawDelta / 2.
        pitchDelta = pitchFov - self.camera.getPitchFov(self.cameraOrientation)
        if pitchDelta < 0.:
            pitchDelta = 0.
        self.mosaic.pitchStart = pitchPos - pitchDelta / 2.
        self.mosaic.pitchEnd = pitchPos + pitchDelta / 2.

    def setStartEndFromNbPicts(self, yawNbPicts, pitchNbPicts):
        """ Set the start/end positions from nb picts.

        @param yawNbPicts: yaw nb picts
        @type yawNbPicts: int

        @param pitchNbPicts: pitch nb picts
        @type pitchNbPicts: int
        """
        yawPos, pitchPos = 0., 0.
        yawDelta = self.camera.getYawFov(self.cameraOrientation) * (1 - self.mosaic.overlap) * (yawNbPicts - 1)
        if yawNbPicts > 1:
            yawDelta -= .01
        self.mosaic.yawStart = yawPos - yawDelta / 2.
        self.mosaic.yawEnd = yawPos + yawDelta / 2.
        pitchDelta = self.camera.getPitchFov(self.cameraOrientation) * (1 - self.mosaic.overlap) * (pitchNbPicts - 1)
        if pitchNbPicts > 1:
            pitchDelta -= .01
        self.mosaic.pitchStart = pitchPos - pitchDelta / 2.
        self.mosaic.pitchEnd = pitchPos + pitchDelta / 2.

    def switchToRealHardware(self):
        """ Use real hardware.
        """
        Logger().trace("Shooting.switchToRealHardware()")
        try:
            #self.simulatedHardware.shutdown()
            self.realHardware.init()
            Logger().debug("Shooting.switchToRealHardware(): realHardware initialized")
            self.hardware = self.realHardware
            self.switchToRealHardwareSignal.emit(True)
        except HardwareError, message:
            Logger().exception("Shooting.switchToRealHardware()")
            self.switchToRealHardwareSignal.emit(False, str(message))

    def switchToSimulatedHardware(self):
        """ Use simulated hardware.
        """
        Logger().trace("Shooting.switchToSimulatedHardware()")
        try:
            self.realHardware.shutdown() # Test if init first
        except:
            Logger().exception("Shooting.switchToSimulatedHardware()")
        self.hardware = self.simulatedHardware
        self.hardware.init()

    def setManualShoot(self, flag):
        """ Turn on/off manual shoot.

        In manual shoot mode, the head switch to pause at each end of position.

        @param flag: flag for manual shoot
        @type flag: bool
        """
        self.__manualShoot = flag

    def getShootingIndex(self):
        """ Get the index of the current shooting position.

        @return: index of the current shooting position
        @rtype: int
        """
        index = self.__scan.getPositionIndex()
        if self.__forceNewShootingIndex:
            return index + 1
        else:
            return index

    def setShootingIndex(self, index):
        """ Set a new shooting sequence index.
        """
        self.__scan.setPositionIndex(index)
        self.__forceNewShootingIndex = True

    def start(self):
        """ Start pano shooting.
        """
        def checkPauseStop():
            """ Check if pause or stop requested.
            """
            if self.__pause:
                Logger().info("Pause")
                self.pausedSignal.emit()
                while self.__pause:
                    time.sleep(0.1)
                self.resumedSignal.emit()
                Logger().info("Resume")
            if self.__stop:
                Logger().info("Stop")
                raise StopIteration

        Logger().trace("Shooting.start()")

        if self.cameraOrientation == 'portrait':
            roll = 90.
        elif self.cameraOrientation == 'landscape':
            roll = 0.
        elif self.cameraOrientation == 'custom':
            roll = self.cameraRoll
        else:
            raise ValueError("cameraOrientation must be in ('portrait', 'landscape', 'custom'")
        values = {'title' : self.title,
                  'gps': self.gps,
                  'comment': self.comment,
                  'headOrientation': "up",
                  'cameraOrientation': "%s" % self.cameraOrientation,
                  'roll': "%.1f" % roll,
                  'stabilizationDelay': "%.1f" % self.stabilizationDelay,
                  'timeValue': "%.1f" % self.camera.timeValue,
                  'bracketingNbPicts': "%d" % self.camera.bracketingNbPicts,
                  'bracketingIntent': "%s" % self.camera.bracketingIntent,
                  'sensorCoef': "%.1f" % self.camera.sensorCoef,
                  'sensorRatio': "%s" % self.camera.sensorRatio,
                  'lensType': "%s" % self.camera.lens.type_,
                  'focal': "%.1f" % self.camera.lens.focal}
        if self.mode == 'mosaic':
            data = MosaicData()
            values.update({'yawNbPicts': "%d" % self.mosaic.yawNbPicts,
                           'pitchNbPicts': "%d" % self.mosaic.pitchNbPicts,
                           'overlap': "%.2f" % self.mosaic.overlap,
                           'yawRealOverlap': "%.2f" % self.mosaic.yawRealOverlap,
                           'pitchRealOverlap': "%.2f" % self.mosaic.pitchRealOverlap})
        else:
            data = PresetData()
            values.update({'name': "%s" % self.preset.name})
        data.createHeader(values)
        self.error = False
        self.progress = 0.
        self.__stop = False
        self.__pause = False
        self.__shooting = True
        self.updateInfoSignal.emit({'progress': 0.})
        self.startedSignal.emit()

        # Loop over all positions
        if self.mode == 'mosaic':
            self.__scan = self.mosaic
        else:
            self.__scan = self.preset
        try:
            Logger().info("Starting shoot process...")
            for index, (yaw, pitch) in self.__scan.iterPositions(): # Use while True + getCurrentPosition()?
                try:
                    if isinstance(index, tuple):
                        index, yawIndex, pitchIndex = index
                    self.__forceNewShootingIndex = False
                    self.newPositionSignal.emit(yaw, pitch, next=True) # Add index(es)

                    Logger().info("Moving")
                    try:
                        Logger().debug("Shooting.start(): moving to yaw=%d/%d pitch=%d/%d" % \
                                          (yawIndex, self.__scan.yawNbPicts, pitchIndex, self.__scan.pitchNbPicts))
                        self.sequence = _("Moving to yaw=%d/%d pitch=%d/%d" % \
                                          (yawIndex, self.__scan.yawNbPicts, pitchIndex, self.__scan.pitchNbPicts))
                    except NameError:
                        Logger().debug("Shooting.start(): moving to %d/%d" % (index, self.__scan.totalNbPicts))
                        self.sequence = _("Moving to %d/%d" % (index, self.__scan.totalNbPicts))
                    self.updateInfoSignal.emit({'sequence': self.sequence})
                    self.hardware.gotoPosition(yaw, pitch)

                    Logger().info("Stabilization")
                    self.sequence = _("Stabilizing")
                    self.updateInfoSignal.emit({'sequence': self.sequence})
                    time.sleep(self.stabilizationDelay)

                    # Test manual shooting flag
                    if self.__manualShoot and not self.__stop:
                        self.__pause = True
                        Logger().info("Wait for manual shooting trigger...")

                    # Check pause or cancel
                    checkPauseStop()

                    # If a new shooting position has been requested (from the view),
                    # we force a new iteration to get the new position
                    if self.__forceNewShootingIndex:
                        continue

                    # Camera shutter cycle
                    for bracket in xrange(self.camera.bracketingNbPicts):

                        # Mirror lockup sequence
                        if self.camera.mirrorLockup:
                            Logger().info("Mirror lockup")
                            sequence = _("Mirror lockup")
                            self.updateInfoSignal.emit({'sequence': sequence})
                            self.hardware.shoot(self.stabilizationDelay)

                        # Shoot
                        Logger().info("Shooting")
                        try:
                            Logger().debug("Shooting.start(): shooting at yaw=%d/%d pitch=%d/%d bkt=%d/%d" % \
                                     (yawIndex, self.__scan.yawNbPicts, pitchIndex, self.__scan.pitchNbPicts,
                                      bracket + 1, self.camera.bracketingNbPicts))
                            sequence = _("Shooting at yaw=%d/%d pitch=%d/%d bkt=%d/%d") % \
                                     (yawIndex, self.__scan.yawNbPicts, pitchIndex, self.__scan.pitchNbPicts,
                                      bracket + 1, self.camera.bracketingNbPicts)
                        except NameError:
                            Logger().debug("Shooting.start(): shooting at %d/%d bkt=%d/%d" % \
                                           (index, self.__scan.totalNbPicts, bracket + 1, self.camera.bracketingNbPicts))
                            sequence = _("Shooting at %d/%d bkt=%d/%d") % \
                                     (index, self.__scan.totalNbPicts, bracket + 1, self.camera.bracketingNbPicts)
                        self.updateInfoSignal.emit({'sequence': sequence})
                        self.hardware.shoot(self.camera.timeValue)

                        # Add image to the xml data file
                        data.addPicture(bracket + 1, yaw, pitch, roll)

                    # Update global shooting progression
                    progressFraction = float(index) / float(self.__scan.totalNbPicts)
                    self.updateInfoSignal.emit({'progress': progressFraction})
                    self.newPositionSignal.emit(yaw, pitch, status='ok', next=True)

                    # Test manual shooting flag
                    if self.__manualShoot and not self.__stop:
                        self.__pause = True
                        Logger().info("Wait for manual shooting trigger...")

                    # Check pause or cancel
                    checkPauseStop()
                    
                    if not self.__forceNewShootingIndex:
                        self.newPositionSignal.emit(yaw, pitch, status='ok', next=False)

                except HardwareError:
                    self.hardware.stopAxis()
                    Logger().exception("Shooting.start()")
                    Logger().warning("Shooting.start(): position (yaw=%.1f, pitch=%.1f) out of limits" % (yaw, pitch))

                    progressFraction = float(index) / float(self.__scan.totalNbPicts)
                    self.updateInfoSignal.emit({'progress': progressFraction})
                    self.newPositionSignal.emit(yaw, pitch, status='error', next=True)

                    # Test manual shooting flag
                    if self.__manualShoot and not self.__stop:
                        self.__pause = True
                        Logger().info("Wait for manual shooting trigger...")

                    # Check pause or cancel
                    checkPauseStop()
                    
                    if not self.__forceNewShootingIndex:
                        self.newPositionSignal.emit(yaw, pitch, status='error', next=False)

        except StopIteration:
            Logger().debug("Shooting.start(): stop detected")
            status = 'cancel'
            Logger().warning("Shoot process canceled")
        except:
            Logger().exception("Shooting.start()")
            status = 'fail'
            Logger().error("Shoot process failed")
        else:
            status = 'ok'
            Logger().info("Shoot process finished")

        self.__shooting = False
        self.stoppedSignal.emit(status)

    def isShooting(self):
        """ Test if shooting is running.

        @return: True if shooting is running, False otherwise
        @rtype: bool
        """
        return self.__shooting

    def pause(self):
        """ Pause execution of pano shooting.
        """
        Logger().trace("Shooting.pause()")
        self.__pause = True

    def isPaused(self):
        """ Test if shotting is paused.

        @return: True if shooting is paused, False otherwise
        @rtype: bool
        """
        return self.__pause

    def resume(self):
        """ Resume  execution of shooting.
        """
        Logger().trace("Shooting.resume()")
        self.__pause = False

    def stop(self):
        """ Cancel execution of shooting.
        """
        Logger().trace("Shooting.stop()")
        self.__stop = True
        self.__pause = False
        self.hardware.stopAxis()

    def shutdown(self):
        """ Cleanly terminate the model.

        Save values to preferences.
        """
        Logger().trace("Shooting.shutdown()")
        self.hardware.shutdown()
        self.camera.shutdown()
        ConfigManager().save()
